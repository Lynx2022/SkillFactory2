"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import logging

logger = logging.getLogger()
logger.debug('Это дебаг уровень')
logger.info("Просто информация")
logger.warning("Опасно")
logger.error("Ошибка")
logger.critical("Ваще засада")


load_dotenv()
env_path = Path("NewsPaper\config.env")
load_dotenv(dotenv_path=env_path)



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news.apps.NewsConfig',
    'accounts',
    'fpages',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'django_apscheduler',
]


SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / 'static']

LOGIN_REDIRECT_URL = "/news"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

SITE_URL = 'http://127.0.0.1:8000/'

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

APSCHEDULER_DATETIME_FORMAT = 'N j,Y, f:s a'

APSCHEDULER_RUN_NOW_TIMEOUT = 25


CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

LOGGING = {'version': 1,
    'disable_existing_loggers': False,
    'style' : '{',
    'formatters' : {
        'console_debug_' :{'format' : '%(asctime)s %(levelname)s %(message)s'},
        'console_warning_' : {'format' : '%(asctime)s %(levelname)s %(message)s %(pathname)s'},
        'console_error_critical_' : {'format' : '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s'},
        'mail_': {'format': '%(asctime)s %(levelname)s - %(message)s - %(pathname)s'},
        'security_': {'format': '%(asctime)s %(levelname)s - %(module)s - %(message)s'},
        'general_log_': {'format': '%(asctime)s %(levelname)s - %(module)s - %(message)s'},

    },

        'filters': {
            'require_debug_true': {'()': 'django.utils.log.RequireDebugTrue'},
            'require_debug_false': {'()': 'django.utils.log.RequireDebugFalse'},
        },
        'handlers': {
             'console_debug': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'console_debug_',
                'filters': ['require_debug_true'],
            },
            'console_warning': {
                'level': 'WARNING',
                'class': 'logging.StreamHandler',
                'formatter': 'console_warning_',
            },
            'console_error_critical': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'console_error_critical_',
            },
            'general_file': {
                'class': "logging.FileHandler",
                'filename': "general.log",
                'level': "INFO",
                'filters': ['require_debug_false'],
                'formatter': 'general_log_',
            },
            'errors_file': {
                'class': "logging.FileHandler",
                'filename': "errors.log",
                'level': "ERROR",
                'formatter': 'console_error_critical_',
            },
            'security_file': {
                'class': "logging.FileHandler",
                'filename': "security.log",
                'level': "WARNING",
                'formatter': "security_",
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'django.utils.log.AdminEmailHandler',
                'filters': ['require_debug_false'],
                'formatter': 'mail_',
            },
        },
        'loggers': {
            'console_debug': {
                'handlers': ['console_debug'],
                'propagate': True,
            },
            'console_warning': {
                'handlers': ['console_warning'],
                'propagate': True,
            },
            'console_error': {
                'handlers': ['console_error_critical'],
                'propagate': True,
            },
            'django.request': {
                'handlers': ['mail_admins', 'errors_file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.server': {
                'handlers': ['mail_admins', 'errors_file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.db_backends': {
                'handlers': ['errors_file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.template': {
                'handlers': ['errors_file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.security': {
                'handlers': ['security_file'],
                'level': 'WARNING',
                'propagate': False,
            }
        }
    }
